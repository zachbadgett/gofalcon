// Code generated by go-swagger; DO NOT EDIT.

package discover

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryActiveDiscoveryRulesReader is a Reader for the QueryActiveDiscoveryRules structure.
type QueryActiveDiscoveryRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryActiveDiscoveryRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryActiveDiscoveryRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryActiveDiscoveryRulesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryActiveDiscoveryRulesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryActiveDiscoveryRulesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryActiveDiscoveryRulesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewQueryActiveDiscoveryRulesOK creates a QueryActiveDiscoveryRulesOK with default headers values
func NewQueryActiveDiscoveryRulesOK() *QueryActiveDiscoveryRulesOK {
	return &QueryActiveDiscoveryRulesOK{}
}

/*
QueryActiveDiscoveryRulesOK describes a response with status code 200, with default header values.

OK
*/
type QueryActiveDiscoveryRulesOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecQueryResponse
}

// IsSuccess returns true when this query active discovery rules o k response has a 2xx status code
func (o *QueryActiveDiscoveryRulesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query active discovery rules o k response has a 3xx status code
func (o *QueryActiveDiscoveryRulesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query active discovery rules o k response has a 4xx status code
func (o *QueryActiveDiscoveryRulesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query active discovery rules o k response has a 5xx status code
func (o *QueryActiveDiscoveryRulesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query active discovery rules o k response a status code equal to that given
func (o *QueryActiveDiscoveryRulesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query active discovery rules o k response
func (o *QueryActiveDiscoveryRulesOK) Code() int {
	return 200
}

func (o *QueryActiveDiscoveryRulesOK) Error() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-rules/v1][%d] queryActiveDiscoveryRulesOK  %+v", 200, o.Payload)
}

func (o *QueryActiveDiscoveryRulesOK) String() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-rules/v1][%d] queryActiveDiscoveryRulesOK  %+v", 200, o.Payload)
}

func (o *QueryActiveDiscoveryRulesOK) GetPayload() *models.MsaspecQueryResponse {
	return o.Payload
}

func (o *QueryActiveDiscoveryRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryActiveDiscoveryRulesBadRequest creates a QueryActiveDiscoveryRulesBadRequest with default headers values
func NewQueryActiveDiscoveryRulesBadRequest() *QueryActiveDiscoveryRulesBadRequest {
	return &QueryActiveDiscoveryRulesBadRequest{}
}

/*
QueryActiveDiscoveryRulesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryActiveDiscoveryRulesBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this query active discovery rules bad request response has a 2xx status code
func (o *QueryActiveDiscoveryRulesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query active discovery rules bad request response has a 3xx status code
func (o *QueryActiveDiscoveryRulesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query active discovery rules bad request response has a 4xx status code
func (o *QueryActiveDiscoveryRulesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query active discovery rules bad request response has a 5xx status code
func (o *QueryActiveDiscoveryRulesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query active discovery rules bad request response a status code equal to that given
func (o *QueryActiveDiscoveryRulesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query active discovery rules bad request response
func (o *QueryActiveDiscoveryRulesBadRequest) Code() int {
	return 400
}

func (o *QueryActiveDiscoveryRulesBadRequest) Error() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-rules/v1][%d] queryActiveDiscoveryRulesBadRequest  %+v", 400, o.Payload)
}

func (o *QueryActiveDiscoveryRulesBadRequest) String() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-rules/v1][%d] queryActiveDiscoveryRulesBadRequest  %+v", 400, o.Payload)
}

func (o *QueryActiveDiscoveryRulesBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *QueryActiveDiscoveryRulesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryActiveDiscoveryRulesForbidden creates a QueryActiveDiscoveryRulesForbidden with default headers values
func NewQueryActiveDiscoveryRulesForbidden() *QueryActiveDiscoveryRulesForbidden {
	return &QueryActiveDiscoveryRulesForbidden{}
}

/*
QueryActiveDiscoveryRulesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryActiveDiscoveryRulesForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query active discovery rules forbidden response has a 2xx status code
func (o *QueryActiveDiscoveryRulesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query active discovery rules forbidden response has a 3xx status code
func (o *QueryActiveDiscoveryRulesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query active discovery rules forbidden response has a 4xx status code
func (o *QueryActiveDiscoveryRulesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query active discovery rules forbidden response has a 5xx status code
func (o *QueryActiveDiscoveryRulesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query active discovery rules forbidden response a status code equal to that given
func (o *QueryActiveDiscoveryRulesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query active discovery rules forbidden response
func (o *QueryActiveDiscoveryRulesForbidden) Code() int {
	return 403
}

func (o *QueryActiveDiscoveryRulesForbidden) Error() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-rules/v1][%d] queryActiveDiscoveryRulesForbidden  %+v", 403, o.Payload)
}

func (o *QueryActiveDiscoveryRulesForbidden) String() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-rules/v1][%d] queryActiveDiscoveryRulesForbidden  %+v", 403, o.Payload)
}

func (o *QueryActiveDiscoveryRulesForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryActiveDiscoveryRulesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryActiveDiscoveryRulesTooManyRequests creates a QueryActiveDiscoveryRulesTooManyRequests with default headers values
func NewQueryActiveDiscoveryRulesTooManyRequests() *QueryActiveDiscoveryRulesTooManyRequests {
	return &QueryActiveDiscoveryRulesTooManyRequests{}
}

/*
QueryActiveDiscoveryRulesTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryActiveDiscoveryRulesTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query active discovery rules too many requests response has a 2xx status code
func (o *QueryActiveDiscoveryRulesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query active discovery rules too many requests response has a 3xx status code
func (o *QueryActiveDiscoveryRulesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query active discovery rules too many requests response has a 4xx status code
func (o *QueryActiveDiscoveryRulesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query active discovery rules too many requests response has a 5xx status code
func (o *QueryActiveDiscoveryRulesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query active discovery rules too many requests response a status code equal to that given
func (o *QueryActiveDiscoveryRulesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query active discovery rules too many requests response
func (o *QueryActiveDiscoveryRulesTooManyRequests) Code() int {
	return 429
}

func (o *QueryActiveDiscoveryRulesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-rules/v1][%d] queryActiveDiscoveryRulesTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryActiveDiscoveryRulesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-rules/v1][%d] queryActiveDiscoveryRulesTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryActiveDiscoveryRulesTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryActiveDiscoveryRulesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryActiveDiscoveryRulesInternalServerError creates a QueryActiveDiscoveryRulesInternalServerError with default headers values
func NewQueryActiveDiscoveryRulesInternalServerError() *QueryActiveDiscoveryRulesInternalServerError {
	return &QueryActiveDiscoveryRulesInternalServerError{}
}

/*
QueryActiveDiscoveryRulesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryActiveDiscoveryRulesInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this query active discovery rules internal server error response has a 2xx status code
func (o *QueryActiveDiscoveryRulesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query active discovery rules internal server error response has a 3xx status code
func (o *QueryActiveDiscoveryRulesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query active discovery rules internal server error response has a 4xx status code
func (o *QueryActiveDiscoveryRulesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query active discovery rules internal server error response has a 5xx status code
func (o *QueryActiveDiscoveryRulesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query active discovery rules internal server error response a status code equal to that given
func (o *QueryActiveDiscoveryRulesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query active discovery rules internal server error response
func (o *QueryActiveDiscoveryRulesInternalServerError) Code() int {
	return 500
}

func (o *QueryActiveDiscoveryRulesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-rules/v1][%d] queryActiveDiscoveryRulesInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryActiveDiscoveryRulesInternalServerError) String() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-rules/v1][%d] queryActiveDiscoveryRulesInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryActiveDiscoveryRulesInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *QueryActiveDiscoveryRulesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
