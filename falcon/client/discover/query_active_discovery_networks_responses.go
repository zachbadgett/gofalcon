// Code generated by go-swagger; DO NOT EDIT.

package discover

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// QueryActiveDiscoveryNetworksReader is a Reader for the QueryActiveDiscoveryNetworks structure.
type QueryActiveDiscoveryNetworksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryActiveDiscoveryNetworksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryActiveDiscoveryNetworksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryActiveDiscoveryNetworksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryActiveDiscoveryNetworksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewQueryActiveDiscoveryNetworksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryActiveDiscoveryNetworksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewQueryActiveDiscoveryNetworksOK creates a QueryActiveDiscoveryNetworksOK with default headers values
func NewQueryActiveDiscoveryNetworksOK() *QueryActiveDiscoveryNetworksOK {
	return &QueryActiveDiscoveryNetworksOK{}
}

/*
QueryActiveDiscoveryNetworksOK describes a response with status code 200, with default header values.

OK
*/
type QueryActiveDiscoveryNetworksOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecQueryResponse
}

// IsSuccess returns true when this query active discovery networks o k response has a 2xx status code
func (o *QueryActiveDiscoveryNetworksOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query active discovery networks o k response has a 3xx status code
func (o *QueryActiveDiscoveryNetworksOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query active discovery networks o k response has a 4xx status code
func (o *QueryActiveDiscoveryNetworksOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query active discovery networks o k response has a 5xx status code
func (o *QueryActiveDiscoveryNetworksOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query active discovery networks o k response a status code equal to that given
func (o *QueryActiveDiscoveryNetworksOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query active discovery networks o k response
func (o *QueryActiveDiscoveryNetworksOK) Code() int {
	return 200
}

func (o *QueryActiveDiscoveryNetworksOK) Error() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-networks/v1][%d] queryActiveDiscoveryNetworksOK  %+v", 200, o.Payload)
}

func (o *QueryActiveDiscoveryNetworksOK) String() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-networks/v1][%d] queryActiveDiscoveryNetworksOK  %+v", 200, o.Payload)
}

func (o *QueryActiveDiscoveryNetworksOK) GetPayload() *models.MsaspecQueryResponse {
	return o.Payload
}

func (o *QueryActiveDiscoveryNetworksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryActiveDiscoveryNetworksBadRequest creates a QueryActiveDiscoveryNetworksBadRequest with default headers values
func NewQueryActiveDiscoveryNetworksBadRequest() *QueryActiveDiscoveryNetworksBadRequest {
	return &QueryActiveDiscoveryNetworksBadRequest{}
}

/*
QueryActiveDiscoveryNetworksBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryActiveDiscoveryNetworksBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this query active discovery networks bad request response has a 2xx status code
func (o *QueryActiveDiscoveryNetworksBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query active discovery networks bad request response has a 3xx status code
func (o *QueryActiveDiscoveryNetworksBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query active discovery networks bad request response has a 4xx status code
func (o *QueryActiveDiscoveryNetworksBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query active discovery networks bad request response has a 5xx status code
func (o *QueryActiveDiscoveryNetworksBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query active discovery networks bad request response a status code equal to that given
func (o *QueryActiveDiscoveryNetworksBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query active discovery networks bad request response
func (o *QueryActiveDiscoveryNetworksBadRequest) Code() int {
	return 400
}

func (o *QueryActiveDiscoveryNetworksBadRequest) Error() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-networks/v1][%d] queryActiveDiscoveryNetworksBadRequest  %+v", 400, o.Payload)
}

func (o *QueryActiveDiscoveryNetworksBadRequest) String() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-networks/v1][%d] queryActiveDiscoveryNetworksBadRequest  %+v", 400, o.Payload)
}

func (o *QueryActiveDiscoveryNetworksBadRequest) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *QueryActiveDiscoveryNetworksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryActiveDiscoveryNetworksForbidden creates a QueryActiveDiscoveryNetworksForbidden with default headers values
func NewQueryActiveDiscoveryNetworksForbidden() *QueryActiveDiscoveryNetworksForbidden {
	return &QueryActiveDiscoveryNetworksForbidden{}
}

/*
QueryActiveDiscoveryNetworksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryActiveDiscoveryNetworksForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query active discovery networks forbidden response has a 2xx status code
func (o *QueryActiveDiscoveryNetworksForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query active discovery networks forbidden response has a 3xx status code
func (o *QueryActiveDiscoveryNetworksForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query active discovery networks forbidden response has a 4xx status code
func (o *QueryActiveDiscoveryNetworksForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this query active discovery networks forbidden response has a 5xx status code
func (o *QueryActiveDiscoveryNetworksForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this query active discovery networks forbidden response a status code equal to that given
func (o *QueryActiveDiscoveryNetworksForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the query active discovery networks forbidden response
func (o *QueryActiveDiscoveryNetworksForbidden) Code() int {
	return 403
}

func (o *QueryActiveDiscoveryNetworksForbidden) Error() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-networks/v1][%d] queryActiveDiscoveryNetworksForbidden  %+v", 403, o.Payload)
}

func (o *QueryActiveDiscoveryNetworksForbidden) String() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-networks/v1][%d] queryActiveDiscoveryNetworksForbidden  %+v", 403, o.Payload)
}

func (o *QueryActiveDiscoveryNetworksForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryActiveDiscoveryNetworksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryActiveDiscoveryNetworksTooManyRequests creates a QueryActiveDiscoveryNetworksTooManyRequests with default headers values
func NewQueryActiveDiscoveryNetworksTooManyRequests() *QueryActiveDiscoveryNetworksTooManyRequests {
	return &QueryActiveDiscoveryNetworksTooManyRequests{}
}

/*
QueryActiveDiscoveryNetworksTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type QueryActiveDiscoveryNetworksTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this query active discovery networks too many requests response has a 2xx status code
func (o *QueryActiveDiscoveryNetworksTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query active discovery networks too many requests response has a 3xx status code
func (o *QueryActiveDiscoveryNetworksTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query active discovery networks too many requests response has a 4xx status code
func (o *QueryActiveDiscoveryNetworksTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this query active discovery networks too many requests response has a 5xx status code
func (o *QueryActiveDiscoveryNetworksTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this query active discovery networks too many requests response a status code equal to that given
func (o *QueryActiveDiscoveryNetworksTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the query active discovery networks too many requests response
func (o *QueryActiveDiscoveryNetworksTooManyRequests) Code() int {
	return 429
}

func (o *QueryActiveDiscoveryNetworksTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-networks/v1][%d] queryActiveDiscoveryNetworksTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryActiveDiscoveryNetworksTooManyRequests) String() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-networks/v1][%d] queryActiveDiscoveryNetworksTooManyRequests  %+v", 429, o.Payload)
}

func (o *QueryActiveDiscoveryNetworksTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *QueryActiveDiscoveryNetworksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryActiveDiscoveryNetworksInternalServerError creates a QueryActiveDiscoveryNetworksInternalServerError with default headers values
func NewQueryActiveDiscoveryNetworksInternalServerError() *QueryActiveDiscoveryNetworksInternalServerError {
	return &QueryActiveDiscoveryNetworksInternalServerError{}
}

/*
QueryActiveDiscoveryNetworksInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryActiveDiscoveryNetworksInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaspecResponseFields
}

// IsSuccess returns true when this query active discovery networks internal server error response has a 2xx status code
func (o *QueryActiveDiscoveryNetworksInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query active discovery networks internal server error response has a 3xx status code
func (o *QueryActiveDiscoveryNetworksInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query active discovery networks internal server error response has a 4xx status code
func (o *QueryActiveDiscoveryNetworksInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query active discovery networks internal server error response has a 5xx status code
func (o *QueryActiveDiscoveryNetworksInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query active discovery networks internal server error response a status code equal to that given
func (o *QueryActiveDiscoveryNetworksInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query active discovery networks internal server error response
func (o *QueryActiveDiscoveryNetworksInternalServerError) Code() int {
	return 500
}

func (o *QueryActiveDiscoveryNetworksInternalServerError) Error() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-networks/v1][%d] queryActiveDiscoveryNetworksInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryActiveDiscoveryNetworksInternalServerError) String() string {
	return fmt.Sprintf("[GET /discover/queries/active-discovery-networks/v1][%d] queryActiveDiscoveryNetworksInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryActiveDiscoveryNetworksInternalServerError) GetPayload() *models.MsaspecResponseFields {
	return o.Payload
}

func (o *QueryActiveDiscoveryNetworksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaspecResponseFields)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
