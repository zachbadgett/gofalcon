// Code generated by go-swagger; DO NOT EDIT.

package d4c_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetD4CCGPAccountReader is a Reader for the GetD4CCGPAccount structure.
type GetD4CCGPAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetD4CCGPAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetD4CCGPAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewGetD4CCGPAccountMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetD4CCGPAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetD4CCGPAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetD4CCGPAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetD4CCGPAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetD4CCGPAccountOK creates a GetD4CCGPAccountOK with default headers values
func NewGetD4CCGPAccountOK() *GetD4CCGPAccountOK {
	return &GetD4CCGPAccountOK{}
}

/*
GetD4CCGPAccountOK describes a response with status code 200, with default header values.

OK
*/
type GetD4CCGPAccountOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPAccountResponseV1
}

// IsSuccess returns true when this get d4 c c g p account o k response has a 2xx status code
func (o *GetD4CCGPAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get d4 c c g p account o k response has a 3xx status code
func (o *GetD4CCGPAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c c g p account o k response has a 4xx status code
func (o *GetD4CCGPAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c c g p account o k response has a 5xx status code
func (o *GetD4CCGPAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c c g p account o k response a status code equal to that given
func (o *GetD4CCGPAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get d4 c c g p account o k response
func (o *GetD4CCGPAccountOK) Code() int {
	return 200
}

func (o *GetD4CCGPAccountOK) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountOK  %+v", 200, o.Payload)
}

func (o *GetD4CCGPAccountOK) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountOK  %+v", 200, o.Payload)
}

func (o *GetD4CCGPAccountOK) GetPayload() *models.RegistrationGCPAccountResponseV1 {
	return o.Payload
}

func (o *GetD4CCGPAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPAccountResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CCGPAccountMultiStatus creates a GetD4CCGPAccountMultiStatus with default headers values
func NewGetD4CCGPAccountMultiStatus() *GetD4CCGPAccountMultiStatus {
	return &GetD4CCGPAccountMultiStatus{}
}

/*
GetD4CCGPAccountMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type GetD4CCGPAccountMultiStatus struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPAccountResponseV1
}

// IsSuccess returns true when this get d4 c c g p account multi status response has a 2xx status code
func (o *GetD4CCGPAccountMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get d4 c c g p account multi status response has a 3xx status code
func (o *GetD4CCGPAccountMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c c g p account multi status response has a 4xx status code
func (o *GetD4CCGPAccountMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c c g p account multi status response has a 5xx status code
func (o *GetD4CCGPAccountMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c c g p account multi status response a status code equal to that given
func (o *GetD4CCGPAccountMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the get d4 c c g p account multi status response
func (o *GetD4CCGPAccountMultiStatus) Code() int {
	return 207
}

func (o *GetD4CCGPAccountMultiStatus) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountMultiStatus  %+v", 207, o.Payload)
}

func (o *GetD4CCGPAccountMultiStatus) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountMultiStatus  %+v", 207, o.Payload)
}

func (o *GetD4CCGPAccountMultiStatus) GetPayload() *models.RegistrationGCPAccountResponseV1 {
	return o.Payload
}

func (o *GetD4CCGPAccountMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPAccountResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CCGPAccountBadRequest creates a GetD4CCGPAccountBadRequest with default headers values
func NewGetD4CCGPAccountBadRequest() *GetD4CCGPAccountBadRequest {
	return &GetD4CCGPAccountBadRequest{}
}

/*
GetD4CCGPAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetD4CCGPAccountBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPAccountResponseV1
}

// IsSuccess returns true when this get d4 c c g p account bad request response has a 2xx status code
func (o *GetD4CCGPAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c c g p account bad request response has a 3xx status code
func (o *GetD4CCGPAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c c g p account bad request response has a 4xx status code
func (o *GetD4CCGPAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c c g p account bad request response has a 5xx status code
func (o *GetD4CCGPAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c c g p account bad request response a status code equal to that given
func (o *GetD4CCGPAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get d4 c c g p account bad request response
func (o *GetD4CCGPAccountBadRequest) Code() int {
	return 400
}

func (o *GetD4CCGPAccountBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountBadRequest  %+v", 400, o.Payload)
}

func (o *GetD4CCGPAccountBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountBadRequest  %+v", 400, o.Payload)
}

func (o *GetD4CCGPAccountBadRequest) GetPayload() *models.RegistrationGCPAccountResponseV1 {
	return o.Payload
}

func (o *GetD4CCGPAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPAccountResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CCGPAccountForbidden creates a GetD4CCGPAccountForbidden with default headers values
func NewGetD4CCGPAccountForbidden() *GetD4CCGPAccountForbidden {
	return &GetD4CCGPAccountForbidden{}
}

/*
GetD4CCGPAccountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetD4CCGPAccountForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get d4 c c g p account forbidden response has a 2xx status code
func (o *GetD4CCGPAccountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c c g p account forbidden response has a 3xx status code
func (o *GetD4CCGPAccountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c c g p account forbidden response has a 4xx status code
func (o *GetD4CCGPAccountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c c g p account forbidden response has a 5xx status code
func (o *GetD4CCGPAccountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c c g p account forbidden response a status code equal to that given
func (o *GetD4CCGPAccountForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get d4 c c g p account forbidden response
func (o *GetD4CCGPAccountForbidden) Code() int {
	return 403
}

func (o *GetD4CCGPAccountForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountForbidden  %+v", 403, o.Payload)
}

func (o *GetD4CCGPAccountForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountForbidden  %+v", 403, o.Payload)
}

func (o *GetD4CCGPAccountForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetD4CCGPAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CCGPAccountTooManyRequests creates a GetD4CCGPAccountTooManyRequests with default headers values
func NewGetD4CCGPAccountTooManyRequests() *GetD4CCGPAccountTooManyRequests {
	return &GetD4CCGPAccountTooManyRequests{}
}

/*
GetD4CCGPAccountTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetD4CCGPAccountTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get d4 c c g p account too many requests response has a 2xx status code
func (o *GetD4CCGPAccountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c c g p account too many requests response has a 3xx status code
func (o *GetD4CCGPAccountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c c g p account too many requests response has a 4xx status code
func (o *GetD4CCGPAccountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c c g p account too many requests response has a 5xx status code
func (o *GetD4CCGPAccountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c c g p account too many requests response a status code equal to that given
func (o *GetD4CCGPAccountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get d4 c c g p account too many requests response
func (o *GetD4CCGPAccountTooManyRequests) Code() int {
	return 429
}

func (o *GetD4CCGPAccountTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetD4CCGPAccountTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetD4CCGPAccountTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetD4CCGPAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CCGPAccountInternalServerError creates a GetD4CCGPAccountInternalServerError with default headers values
func NewGetD4CCGPAccountInternalServerError() *GetD4CCGPAccountInternalServerError {
	return &GetD4CCGPAccountInternalServerError{}
}

/*
GetD4CCGPAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetD4CCGPAccountInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPAccountResponseV1
}

// IsSuccess returns true when this get d4 c c g p account internal server error response has a 2xx status code
func (o *GetD4CCGPAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c c g p account internal server error response has a 3xx status code
func (o *GetD4CCGPAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c c g p account internal server error response has a 4xx status code
func (o *GetD4CCGPAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c c g p account internal server error response has a 5xx status code
func (o *GetD4CCGPAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get d4 c c g p account internal server error response a status code equal to that given
func (o *GetD4CCGPAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get d4 c c g p account internal server error response
func (o *GetD4CCGPAccountInternalServerError) Code() int {
	return 500
}

func (o *GetD4CCGPAccountInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetD4CCGPAccountInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/account/v1][%d] getD4CCGPAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetD4CCGPAccountInternalServerError) GetPayload() *models.RegistrationGCPAccountResponseV1 {
	return o.Payload
}

func (o *GetD4CCGPAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPAccountResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
