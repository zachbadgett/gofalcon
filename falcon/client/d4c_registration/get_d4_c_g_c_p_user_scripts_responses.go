// Code generated by go-swagger; DO NOT EDIT.

package d4c_registration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/crowdstrike/gofalcon/falcon/models"
)

// GetD4CGCPUserScriptsReader is a Reader for the GetD4CGCPUserScripts structure.
type GetD4CGCPUserScriptsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetD4CGCPUserScriptsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetD4CGCPUserScriptsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewGetD4CGCPUserScriptsMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetD4CGCPUserScriptsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetD4CGCPUserScriptsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetD4CGCPUserScriptsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetD4CGCPUserScriptsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetD4CGCPUserScriptsOK creates a GetD4CGCPUserScriptsOK with default headers values
func NewGetD4CGCPUserScriptsOK() *GetD4CGCPUserScriptsOK {
	return &GetD4CGCPUserScriptsOK{}
}

/*
GetD4CGCPUserScriptsOK describes a response with status code 200, with default header values.

OK
*/
type GetD4CGCPUserScriptsOK struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get d4 c g c p user scripts o k response has a 2xx status code
func (o *GetD4CGCPUserScriptsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get d4 c g c p user scripts o k response has a 3xx status code
func (o *GetD4CGCPUserScriptsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts o k response has a 4xx status code
func (o *GetD4CGCPUserScriptsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c g c p user scripts o k response has a 5xx status code
func (o *GetD4CGCPUserScriptsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c g c p user scripts o k response a status code equal to that given
func (o *GetD4CGCPUserScriptsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get d4 c g c p user scripts o k response
func (o *GetD4CGCPUserScriptsOK) Code() int {
	return 200
}

func (o *GetD4CGCPUserScriptsOK) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsOK  %+v", 200, o.Payload)
}

func (o *GetD4CGCPUserScriptsOK) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsOK  %+v", 200, o.Payload)
}

func (o *GetD4CGCPUserScriptsOK) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CGCPUserScriptsMultiStatus creates a GetD4CGCPUserScriptsMultiStatus with default headers values
func NewGetD4CGCPUserScriptsMultiStatus() *GetD4CGCPUserScriptsMultiStatus {
	return &GetD4CGCPUserScriptsMultiStatus{}
}

/*
GetD4CGCPUserScriptsMultiStatus describes a response with status code 207, with default header values.

Multi-Status
*/
type GetD4CGCPUserScriptsMultiStatus struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get d4 c g c p user scripts multi status response has a 2xx status code
func (o *GetD4CGCPUserScriptsMultiStatus) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get d4 c g c p user scripts multi status response has a 3xx status code
func (o *GetD4CGCPUserScriptsMultiStatus) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts multi status response has a 4xx status code
func (o *GetD4CGCPUserScriptsMultiStatus) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c g c p user scripts multi status response has a 5xx status code
func (o *GetD4CGCPUserScriptsMultiStatus) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c g c p user scripts multi status response a status code equal to that given
func (o *GetD4CGCPUserScriptsMultiStatus) IsCode(code int) bool {
	return code == 207
}

// Code gets the status code for the get d4 c g c p user scripts multi status response
func (o *GetD4CGCPUserScriptsMultiStatus) Code() int {
	return 207
}

func (o *GetD4CGCPUserScriptsMultiStatus) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsMultiStatus  %+v", 207, o.Payload)
}

func (o *GetD4CGCPUserScriptsMultiStatus) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsMultiStatus  %+v", 207, o.Payload)
}

func (o *GetD4CGCPUserScriptsMultiStatus) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CGCPUserScriptsBadRequest creates a GetD4CGCPUserScriptsBadRequest with default headers values
func NewGetD4CGCPUserScriptsBadRequest() *GetD4CGCPUserScriptsBadRequest {
	return &GetD4CGCPUserScriptsBadRequest{}
}

/*
GetD4CGCPUserScriptsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetD4CGCPUserScriptsBadRequest struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get d4 c g c p user scripts bad request response has a 2xx status code
func (o *GetD4CGCPUserScriptsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c g c p user scripts bad request response has a 3xx status code
func (o *GetD4CGCPUserScriptsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts bad request response has a 4xx status code
func (o *GetD4CGCPUserScriptsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c g c p user scripts bad request response has a 5xx status code
func (o *GetD4CGCPUserScriptsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c g c p user scripts bad request response a status code equal to that given
func (o *GetD4CGCPUserScriptsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get d4 c g c p user scripts bad request response
func (o *GetD4CGCPUserScriptsBadRequest) Code() int {
	return 400
}

func (o *GetD4CGCPUserScriptsBadRequest) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsBadRequest  %+v", 400, o.Payload)
}

func (o *GetD4CGCPUserScriptsBadRequest) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsBadRequest  %+v", 400, o.Payload)
}

func (o *GetD4CGCPUserScriptsBadRequest) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CGCPUserScriptsForbidden creates a GetD4CGCPUserScriptsForbidden with default headers values
func NewGetD4CGCPUserScriptsForbidden() *GetD4CGCPUserScriptsForbidden {
	return &GetD4CGCPUserScriptsForbidden{}
}

/*
GetD4CGCPUserScriptsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetD4CGCPUserScriptsForbidden struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get d4 c g c p user scripts forbidden response has a 2xx status code
func (o *GetD4CGCPUserScriptsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c g c p user scripts forbidden response has a 3xx status code
func (o *GetD4CGCPUserScriptsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts forbidden response has a 4xx status code
func (o *GetD4CGCPUserScriptsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c g c p user scripts forbidden response has a 5xx status code
func (o *GetD4CGCPUserScriptsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c g c p user scripts forbidden response a status code equal to that given
func (o *GetD4CGCPUserScriptsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get d4 c g c p user scripts forbidden response
func (o *GetD4CGCPUserScriptsForbidden) Code() int {
	return 403
}

func (o *GetD4CGCPUserScriptsForbidden) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsForbidden  %+v", 403, o.Payload)
}

func (o *GetD4CGCPUserScriptsForbidden) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsForbidden  %+v", 403, o.Payload)
}

func (o *GetD4CGCPUserScriptsForbidden) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CGCPUserScriptsTooManyRequests creates a GetD4CGCPUserScriptsTooManyRequests with default headers values
func NewGetD4CGCPUserScriptsTooManyRequests() *GetD4CGCPUserScriptsTooManyRequests {
	return &GetD4CGCPUserScriptsTooManyRequests{}
}

/*
GetD4CGCPUserScriptsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetD4CGCPUserScriptsTooManyRequests struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	/* Too many requests, retry after this time (as milliseconds since epoch)
	 */
	XRateLimitRetryAfter int64

	Payload *models.MsaReplyMetaOnly
}

// IsSuccess returns true when this get d4 c g c p user scripts too many requests response has a 2xx status code
func (o *GetD4CGCPUserScriptsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c g c p user scripts too many requests response has a 3xx status code
func (o *GetD4CGCPUserScriptsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts too many requests response has a 4xx status code
func (o *GetD4CGCPUserScriptsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get d4 c g c p user scripts too many requests response has a 5xx status code
func (o *GetD4CGCPUserScriptsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get d4 c g c p user scripts too many requests response a status code equal to that given
func (o *GetD4CGCPUserScriptsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get d4 c g c p user scripts too many requests response
func (o *GetD4CGCPUserScriptsTooManyRequests) Code() int {
	return 429
}

func (o *GetD4CGCPUserScriptsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetD4CGCPUserScriptsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetD4CGCPUserScriptsTooManyRequests) GetPayload() *models.MsaReplyMetaOnly {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-RetryAfter
	hdrXRateLimitRetryAfter := response.GetHeader("X-RateLimit-RetryAfter")

	if hdrXRateLimitRetryAfter != "" {
		valxRateLimitRetryAfter, err := swag.ConvertInt64(hdrXRateLimitRetryAfter)
		if err != nil {
			return errors.InvalidType("X-RateLimit-RetryAfter", "header", "int64", hdrXRateLimitRetryAfter)
		}
		o.XRateLimitRetryAfter = valxRateLimitRetryAfter
	}

	o.Payload = new(models.MsaReplyMetaOnly)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetD4CGCPUserScriptsInternalServerError creates a GetD4CGCPUserScriptsInternalServerError with default headers values
func NewGetD4CGCPUserScriptsInternalServerError() *GetD4CGCPUserScriptsInternalServerError {
	return &GetD4CGCPUserScriptsInternalServerError{}
}

/*
GetD4CGCPUserScriptsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetD4CGCPUserScriptsInternalServerError struct {

	/* Trace-ID: submit to support if resolving an issue
	 */
	XCSTRACEID string

	/* Request limit per minute.
	 */
	XRateLimitLimit int64

	/* The number of requests remaining for the sliding one minute window.
	 */
	XRateLimitRemaining int64

	Payload *models.RegistrationGCPProvisionGetUserScriptResponseV1
}

// IsSuccess returns true when this get d4 c g c p user scripts internal server error response has a 2xx status code
func (o *GetD4CGCPUserScriptsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get d4 c g c p user scripts internal server error response has a 3xx status code
func (o *GetD4CGCPUserScriptsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get d4 c g c p user scripts internal server error response has a 4xx status code
func (o *GetD4CGCPUserScriptsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get d4 c g c p user scripts internal server error response has a 5xx status code
func (o *GetD4CGCPUserScriptsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get d4 c g c p user scripts internal server error response a status code equal to that given
func (o *GetD4CGCPUserScriptsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get d4 c g c p user scripts internal server error response
func (o *GetD4CGCPUserScriptsInternalServerError) Code() int {
	return 500
}

func (o *GetD4CGCPUserScriptsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetD4CGCPUserScriptsInternalServerError) String() string {
	return fmt.Sprintf("[GET /cloud-connect-gcp/entities/user-scripts/v1][%d] getD4CGCPUserScriptsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetD4CGCPUserScriptsInternalServerError) GetPayload() *models.RegistrationGCPProvisionGetUserScriptResponseV1 {
	return o.Payload
}

func (o *GetD4CGCPUserScriptsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-CS-TRACEID
	hdrXCSTRACEID := response.GetHeader("X-CS-TRACEID")

	if hdrXCSTRACEID != "" {
		o.XCSTRACEID = hdrXCSTRACEID
	}

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	o.Payload = new(models.RegistrationGCPProvisionGetUserScriptResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
